///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'V_DM_KHO'
// Generated by LLBLGen v1.21.2003.712 Final on: Thursday, April 24, 2014, 10:02:27 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace BKI_KHOLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the view 'V_DM_KHO'.
	/// </summary>
	public class V_DM_KHO : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		_iD_NHAN_VIEN, _iD;
			private SqlString		_hO_DEM, _gHI_CHU, _tEN, _tEN_KHO, _mA_KHO, _dIEN_THOAI, _dIA_CHI;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public V_DM_KHO()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>MA_KHO. May be SqlString.Null</LI>
		///		 <LI>TEN_KHO. May be SqlString.Null</LI>
		///		 <LI>DIA_CHI. May be SqlString.Null</LI>
		///		 <LI>DIEN_THOAI. May be SqlString.Null</LI>
		///		 <LI>ID_NHAN_VIEN. May be SqlDecimal.Null</LI>
		///		 <LI>GHI_CHU. May be SqlString.Null</LI>
		///		 <LI>HO_DEM. May be SqlString.Null</LI>
		///		 <LI>TEN. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_V_DM_KHO_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_KHO", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_KHO));
				cmdToExecute.Parameters.Add(new SqlParameter("@TEN_KHO", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tEN_KHO));
				cmdToExecute.Parameters.Add(new SqlParameter("@DIA_CHI", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dIA_CHI));
				cmdToExecute.Parameters.Add(new SqlParameter("@DIEN_THOAI", SqlDbType.VarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dIEN_THOAI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NHAN_VIEN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NHAN_VIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU));
				cmdToExecute.Parameters.Add(new SqlParameter("@HO_DEM", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hO_DEM));
				cmdToExecute.Parameters.Add(new SqlParameter("@TEN", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tEN));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_DM_KHO::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlString MA_KHO
		{
			get
			{
				return _mA_KHO;
			}
			set
			{
				SqlString mA_KHOTmp = (SqlString)value;
				if(mA_KHOTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_KHO", "MA_KHO can't be NULL");
				}
				_mA_KHO = value;
			}
		}


		public SqlString TEN_KHO
		{
			get
			{
				return _tEN_KHO;
			}
			set
			{
				SqlString tEN_KHOTmp = (SqlString)value;
				if(tEN_KHOTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TEN_KHO", "TEN_KHO can't be NULL");
				}
				_tEN_KHO = value;
			}
		}


		public SqlString DIA_CHI
		{
			get
			{
				return _dIA_CHI;
			}
			set
			{
				SqlString dIA_CHITmp = (SqlString)value;
				if(dIA_CHITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DIA_CHI", "DIA_CHI can't be NULL");
				}
				_dIA_CHI = value;
			}
		}


		public SqlString DIEN_THOAI
		{
			get
			{
				return _dIEN_THOAI;
			}
			set
			{
				SqlString dIEN_THOAITmp = (SqlString)value;
				if(dIEN_THOAITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DIEN_THOAI", "DIEN_THOAI can't be NULL");
				}
				_dIEN_THOAI = value;
			}
		}


		public SqlDecimal ID_NHAN_VIEN
		{
			get
			{
				return _iD_NHAN_VIEN;
			}
			set
			{
				SqlDecimal iD_NHAN_VIENTmp = (SqlDecimal)value;
				if(iD_NHAN_VIENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NHAN_VIEN", "ID_NHAN_VIEN can't be NULL");
				}
				_iD_NHAN_VIEN = value;
			}
		}


		public SqlString GHI_CHU
		{
			get
			{
				return _gHI_CHU;
			}
			set
			{
				SqlString gHI_CHUTmp = (SqlString)value;
				if(gHI_CHUTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GHI_CHU", "GHI_CHU can't be NULL");
				}
				_gHI_CHU = value;
			}
		}


		public SqlString HO_DEM
		{
			get
			{
				return _hO_DEM;
			}
			set
			{
				SqlString hO_DEMTmp = (SqlString)value;
				if(hO_DEMTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("HO_DEM", "HO_DEM can't be NULL");
				}
				_hO_DEM = value;
			}
		}


		public SqlString TEN
		{
			get
			{
				return _tEN;
			}
			set
			{
				SqlString tENTmp = (SqlString)value;
				if(tENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TEN", "TEN can't be NULL");
				}
				_tEN = value;
			}
		}
		#endregion
	}
}
